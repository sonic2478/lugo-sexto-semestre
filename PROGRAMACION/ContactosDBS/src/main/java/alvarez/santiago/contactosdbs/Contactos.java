
package alvarez.santiago.contactosdbs;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.RenderedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Date;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CountDownLatch;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.imageio.ImageReadParam;
import javax.imageio.ImageReader;
import javax.imageio.stream.ImageInputStream;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author ALVAREZ MARES SANTIAGO 6°A T/M
 */
public class Contactos extends javax.swing.JInternalFrame {
    FileInputStream fis;
    int longitud;
    Image imgFoto;
    String nomabus;
    
static final Metodos metodos = new Metodos();
    List<Image> images = new ArrayList<Image>();
    Image bufferImage = null;
    TableRowSorter<TableModel> sorter;
    private CountDownLatch doneSignal = new CountDownLatch(0);
    private boolean[] textVerifier = {false,false,false,false,};
   
    public Contactos() {
        this.setContentPane( new javax.swing.JPanel(){
            @Override
            public void paintComponent(java.awt.Graphics g) {
                super.paintComponent(g);
                java.awt.Image background = new javax.swing.ImageIcon(System.getProperty("user.dir") + "//images//contactos_wallpaper.jpeg").getImage();

                java.awt.Graphics2D g2d = (java.awt.Graphics2D) g;
                g2d.drawImage(background, 0, 0, getWidth(), getHeight(), this);
            }
        });
        initComponents();
        this.updateWholeTable();
        sorter = new TableRowSorter<>(table.getModel());
        table.setRowSorter(sorter);
        this.resetFields();
    }
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JFCFoto = new javax.swing.JFileChooser();
        JLNombre = new javax.swing.JLabel();
        JLApellido = new javax.swing.JLabel();
        JLDomicilio = new javax.swing.JLabel();
        JLTelefono = new javax.swing.JLabel();
        JLEmail = new javax.swing.JLabel();
        JLSexo = new javax.swing.JLabel();
        JLFoto = new javax.swing.JLabel();
        JLFechaNaci = new javax.swing.JLabel();
        JLCodigo = new javax.swing.JLabel();
        JLEdad = new javax.swing.JLabel();
        JTFNombre = new javax.swing.JTextField();
        JTFApellido = new javax.swing.JTextField();
        JTFDomicilio = new javax.swing.JTextField();
        JTFTelefono = new javax.swing.JTextField();
        JTFEmail = new javax.swing.JTextField();
        JRDMujer = new javax.swing.JRadioButton();
        JRDHombre = new javax.swing.JRadioButton();
        JBAgregar = new javax.swing.JButton();
        JBBuscar = new javax.swing.JButton();
        JBModificar = new javax.swing.JButton();
        JBEliminar = new javax.swing.JButton();
        JBLimpiar = new javax.swing.JButton();
        JBCerrar = new javax.swing.JButton();
        JBFoto = new javax.swing.JButton();
        JCBSigno = new javax.swing.JComboBox<>();
        JLSigno = new javax.swing.JLabel();
        JLPersonaje = new javax.swing.JLabel();
        JTFPersonaje = new javax.swing.JTextField();
        JTFEdad = new javax.swing.JTextField();
        JLCod2 = new javax.swing.JLabel();
        JDCFecha = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        JTFCodigo = new javax.swing.JTextField();
        JLNombreW = new javax.swing.JLabel();
        JLApellidoW = new javax.swing.JLabel();
        JLEmailW = new javax.swing.JLabel();
        JLTelefonoW = new javax.swing.JLabel();

        JLNombre.setText("Nombre");

        JLApellido.setText("Apellido");

        JLDomicilio.setText("Domicilio");

        JLTelefono.setText("Telefono");

        JLEmail.setText("Email");

        JLSexo.setText("Sexo");

        JLFoto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        JLFechaNaci.setText("Feha de nacimiento");

        JLCodigo.setText("Codigo");

        JLEdad.setText("Edad");

        JTFEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTFEmailActionPerformed(evt);
            }
        });

        JRDMujer.setText("Mujer");

        JRDHombre.setText("Hombre");

        JBAgregar.setText("Agregar");
        JBAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBAgregarActionPerformed(evt);
            }
        });

        JBBuscar.setText("Buscar");
        JBBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBBuscarActionPerformed(evt);
            }
        });

        JBModificar.setText("Modificar");
        JBModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBModificarActionPerformed(evt);
            }
        });

        JBEliminar.setText("Eliminar");
        JBEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBEliminarActionPerformed(evt);
            }
        });

        JBLimpiar.setText("Limpiar");
        JBLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBLimpiarActionPerformed(evt);
            }
        });

        JBCerrar.setText("Cerrar");
        JBCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBCerrarActionPerformed(evt);
            }
        });

        JBFoto.setText("Foto");
        JBFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBFotoActionPerformed(evt);
            }
        });

        JCBSigno.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aries", "Tauro", "Géminis", "Cáncer", "SUPER_ULTRA_MEGA_HIPER_RECONTRA_LEO", "Virgo", "Libra", "Escorpio", "Sagitario", "Capricornio", "Acuario", "Piscis", " " }));

        JLSigno.setText("Signo zodiacal");

        JLPersonaje.setText("Personaje de anime favorito");

        JTFEdad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTFEdadActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Índice", "Código", "Nombre(s)", "Apellidos", "Domicilio", "Teléfono", "Email", "Fecha nac.", "Edad", "Sexo", "Zodiacal", "Favorito"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowSelectionAllowed(false);
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        JTFCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTFCodigoActionPerformed(evt);
            }
        });

        JLNombreW.setForeground(new java.awt.Color(255, 0, 0));
        JLNombreW.setText("jLabel1");

        JLApellidoW.setForeground(new java.awt.Color(255, 0, 0));
        JLApellidoW.setText("jLabel2");

        JLEmailW.setForeground(new java.awt.Color(255, 0, 0));
        JLEmailW.setText("jLabel4");

        JLTelefonoW.setForeground(new java.awt.Color(255, 0, 0));
        JLTelefonoW.setText("jLabel3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(JLSigno)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(JCBSigno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                        .addComponent(JLDomicilio)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(JTFDomicilio))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(JLEmail)
                                                            .addComponent(JLTelefono))
                                                        .addGap(18, 18, 18)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                            .addComponent(JTFEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                                                            .addComponent(JTFTelefono))))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(JLEmailW)
                                                    .addComponent(JLTelefonoW))))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(JLPersonaje)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(JTFPersonaje)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(JLApellido)
                                .addGap(18, 18, 18)
                                .addComponent(JTFApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(JLApellidoW)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(JLNombre)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(JTFNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(JLNombreW))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(JLCodigo)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JTFCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(74, 74, 74)))
                        .addComponent(JLCod2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(162, 162, 162))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JLFechaNaci)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JDCFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(283, 283, 283)
                        .addComponent(JLFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(JLSexo)
                            .addComponent(JLEdad))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(JRDHombre)
                                .addComponent(JRDMujer))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(JTFEdad, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JBModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(JBEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(JBBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(JBAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(JBLimpiar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(JBCerrar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(JBFoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(265, 265, 265))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 903, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(JLCodigo)
                        .addComponent(JTFCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(JBAgregar))
                    .addComponent(JLCod2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLNombre)
                    .addComponent(JTFNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JBBuscar)
                    .addComponent(JLNombreW))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JLFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JLApellido)
                            .addComponent(JTFApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JLApellidoW))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JLDomicilio)
                            .addComponent(JTFDomicilio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JLTelefono)
                            .addComponent(JTFTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JLTelefonoW)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JBModificar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JBEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JBLimpiar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JBCerrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JBFoto)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JLEmail)
                            .addComponent(JTFEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(JLEmailW)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JLFechaNaci)
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JLEdad)
                            .addComponent(JTFEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JRDMujer)
                            .addComponent(JLSexo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JRDHombre)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JCBSigno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JLSigno))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JLPersonaje)
                            .addComponent(JTFPersonaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(JDCFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JBFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBFotoActionPerformed
    JFCFoto = new JFileChooser();
    JFCFoto.setFileSelectionMode(JFileChooser.FILES_ONLY);
    FileNameExtensionFilter filtro = new FileNameExtensionFilter ("JPG", "jpg");
    JFCFoto.setFileFilter(filtro);
    int estado = JFCFoto.showOpenDialog(null);
        if(estado == JFileChooser.APPROVE_OPTION){
            try{
            fis = new FileInputStream(JFCFoto.getSelectedFile());
            longitud = (int)JFCFoto.getSelectedFile().length();
                try{
                Image img = ImageIO.read(JFCFoto.getSelectedFile()).getScaledInstance(JLFoto.getWidth(),JLFoto.getHeight(),Image.SCALE_DEFAULT);
                JLFoto.setIcon(new ImageIcon(img));
                JLFoto.updateUI();
                }catch(IOException io){
                JOptionPane.showMessageDialog(rootPane,"Imagen: "+io);    
                }
            }catch(FileNotFoundException fnfex){
            JOptionPane.showMessageDialog(rootPane,"Imagen: " +fnfex);
            }
        }
    }//GEN-LAST:event_JBFotoActionPerformed

    private void JBAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBAgregarActionPerformed
    String Nombre = JTFNombre.getText().trim();
        if( Nombre.isBlank() ){
            JOptionPane.showMessageDialog(rootPane, "Agrega el nombre");
            return;
        }
        
        if( textVerifier[0] ){
            JOptionPane.showMessageDialog(rootPane, "El nombre solo puede contener letras");
            return;
        }
        
        String Apellido = JTFApellido.getText().trim();
        if(Apellido.isBlank()){
            JOptionPane.showMessageDialog(rootPane, "Agrega los apellidos");
            return;
        }
        
        if( textVerifier[1] ){
            JOptionPane.showMessageDialog(rootPane, "El apellido solo puede contener letras");
            return;
        }
        
        String Domicilio = JTFDomicilio.getText().trim();
        if(Domicilio.equals("")){
            JOptionPane.showMessageDialog(rootPane, "Agrega su domicilio");
            return;
        }
        
        String Telefono = JTFTelefono.getText().trim();
        if(Telefono.isBlank()){
            JOptionPane.showMessageDialog(rootPane, "Agrega su telefono");
            return;
        }
        
        if( textVerifier[2] ){
            JOptionPane.showMessageDialog(rootPane, "El telefono solo puede contener numeros sin espaciado");
            return;
        }
        
        String Email = JTFEmail.getText().trim();
        if(Email.isBlank()){
            JOptionPane.showMessageDialog(rootPane, "Agrega un email");
            return;
        }
        
        if( textVerifier[3] ){
            JOptionPane.showMessageDialog(rootPane, "Agrega una direccion de email valida");
            return;
        }
        
        java.util.Date fecha = JDCFecha.getDate();
        if(fecha == null){
            JOptionPane.showMessageDialog(rootPane, "Agrega su fecha de nacimiento");
            return;
        }
        java.sql.Date Fecha = new java.sql.Date(fecha.getTime());
        
        int Edad;
        try{
            Edad = Integer.parseInt(JTFEdad.getText());
        } catch(NumberFormatException e){
            JOptionPane.showMessageDialog(rootPane, "Hubo un problema al leer la edad");
            return;
        }
        
        if(!JRDHombre.isSelected() && !JRDMujer.isSelected()){
            JOptionPane.showMessageDialog(rootPane, "Agrega su sexo");
            return;
        }
        String Sexo = JRDHombre.isSelected() ? "M" : "F";
        
        String Signo = (String)JCBSigno.getSelectedItem();
        
        String Personaje = JTFPersonaje.getText().trim();
        if(Personaje.isBlank()){
            JOptionPane.showMessageDialog(rootPane, "Agrega su personaje de anime favorito");
            return;
        }
        
        if(JLFoto.getIcon() == null){
            JOptionPane.showMessageDialog(rootPane, "Agrega una foto");
            return;
        }
        
        int choice = JOptionPane.showConfirmDialog
            (rootPane, 
            "¿Deseas guardar esta información?", 
            "Confirmar guardado", 
            JOptionPane.YES_NO_CANCEL_OPTION);
        
        if(choice == JOptionPane.CANCEL_OPTION){ 
            this.resetFields(); 
            return;
        }
        
        if(choice != JOptionPane.YES_OPTION) return;
        
        waitForUpdateToFinish();
        
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();

        String nextIndex = Integer.toString(
                Integer.parseInt(
                        model.getValueAt(model.getRowCount() - 1, 0)
                                .toString() ) 
                        + 1
        );
        
        String nextCodigo = Integer.toString(
                Integer.parseInt(
                        model.getValueAt(model.getRowCount() - 1, 1)
                                .toString() ) 
                        + 1
        );
        String[] newRow = new String[] {
            nextIndex,
            nextCodigo,
            Nombre, 
            Apellido, 
            Domicilio, 
            Telefono, 
            Email, 
            Fecha.toString(), 
            Integer.toString(Edad), 
            (Sexo.equals("masculino") ? "M" : "F"), 
            Signo, 
            Personaje
        };
        model.addRow( newRow );
        
        images.add(bufferImage);
        
        CompletableFuture.runAsync(new Runnable() {
        @Override
        public void run() {
            System.out.println("Starting async in ADD");
            doneSignal = new CountDownLatch(1);
            try {
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write((RenderedImage)bufferImage, "jpg", baos);
                InputStream is = new ByteArrayInputStream( baos.toByteArray() );
                
                String Codigoverificado = metodos.Agregar(
                        Nombre,
                        Apellido,
                        Domicilio,
                        Telefono,
                        Email,
                        Fecha,
                        Edad,
                        Sexo,
                        Signo,
                        Personaje,
                        is);
                
                if(Codigoverificado != null) model.setValueAt(Codigoverificado, model.getRowCount() - 1, 1);
                System.out.println("FINISHED");
            } catch(SQLException cnfex){
                Logger.getLogger(Contactos.class.getName()).log(Level.SEVERE, null, cnfex);
                model.removeRow( model.getRowCount() - 1 );
                JOptionPane.showMessageDialog(rootPane, "Hubo un problema al guardar los datos, los cambios se han revertido.");
            } catch (IOException cnfex) {
                Logger.getLogger(Contactos.class.getName()).log(Level.SEVERE, null, cnfex);
                JOptionPane.showMessageDialog(rootPane, "Hubo un problema agregando la imagen, asegurate de que sea un archivo .JPG y vuelve a seleccionarla");
            } finally {
                doneSignal.countDown();
            }
        }
    });
    }//GEN-LAST:event_JBAgregarActionPerformed
private void RevisarLet( javax.swing.JTextField component, javax.swing.JLabel warning, int index ){
        String text = component.getText();
        final String REGEX_CONTAINS_NUMBER_VERIFIER = ".*\\d.*";
        textVerifier[index] = !text.matches(REGEX_CONTAINS_NUMBER_VERIFIER);
        
        if( !textVerifier[index] ){
            component.setForeground(Color.red);
            warning.setText("Solo puede contener letras");
        }
        else {
            component.setForeground(Color.black);
            warning.setText(" ");
}
    }  

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        if( evt.getClickCount() == 1 && table.getRowSelectionAllowed() ){
            int selectedRow = table.getSelectedRow();
            if(selectedRow != -1)
            this.useTableToUpdate( selectedRow );
        }
    }//GEN-LAST:event_tableMouseClicked

    private void JTFCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTFCodigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTFCodigoActionPerformed

    private void JBModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBModificarActionPerformed
     String codigotexto = JTFCodigo.getText();
        if(codigotexto.equals("")){
            JOptionPane.showMessageDialog(rootPane, "Selecciona un contacto que cambiar");
            return;
        }
        
        int Codigo = Integer.parseInt(codigotexto);
        
        String Nombre = JTFNombre.getText().trim();
        if( Nombre.isBlank() ){
            JOptionPane.showMessageDialog(rootPane, "Agrega el nombre");
            return;
        }
        
        if( !textVerifier[0] ){
            JOptionPane.showMessageDialog(rootPane, "El nombre solo puede contener letras");
            return;
        }
        
        String Apellido = JTFApellido.getText().trim();
        if(Apellido.isBlank()){
            JOptionPane.showMessageDialog(rootPane, "Agrega los apellidos");
            return;
        }
        
        if( !textVerifier[1] ){
            JOptionPane.showMessageDialog(rootPane, "El apellido solo puede contener letras");
            return;
        }
        
        String Domicilio = JTFDomicilio.getText().trim();
        if(Domicilio.equals("")){
            JOptionPane.showMessageDialog(rootPane, "Agrega su domicilio");
            return;
        }
        
        String Telefono = JTFTelefono.getText().trim();
        if(Telefono.isBlank()){
            JOptionPane.showMessageDialog(rootPane, "Agrega su telefono");
            return;
        }
        
        if( !textVerifier[2] ){
            JOptionPane.showMessageDialog(rootPane, "El telefono solo puede contener numeros sin espaciado");
            return;
        }
        
        String Email = JTFEmail.getText().trim();
        if(Email.isBlank()){
            JOptionPane.showMessageDialog(rootPane, "Agrega un email");
            return;
        }
        
        if( !textVerifier[3] ){
            JOptionPane.showMessageDialog(rootPane, "Agrega una direccion de email valida");
            return;
        }
        
        java.util.Date fecha = JDCFecha.getDate();
        if(fecha == null){
            JOptionPane.showMessageDialog(rootPane, "Agrega su fecha de nacimiento");
            return;
        }
        java.sql.Date Fecha = new java.sql.Date(fecha.getTime());
        
        int Edad;
        try{
            Edad = Integer.parseInt(JTFEdad.getText());
        } catch(NumberFormatException e){
            JOptionPane.showMessageDialog(rootPane, "Hubo un problema al leer la edad");
            return;
        }
        
        if(!JRDHombre.isSelected() && !JRDMujer.isSelected()){
            JOptionPane.showMessageDialog(rootPane, "Agrega su sexo");
            return;
        }
        String Sexo = JRDHombre.isSelected() ? "M" : "F";
        
        String Signo = (String)JCBSigno.getSelectedItem();
        
        String Personaje = JTFPersonaje.getText().trim();
        if(Personaje.isBlank()){
            JOptionPane.showMessageDialog(rootPane, "Agrega su personaje de anime favorito");
            return;
        }
        
        if(JLFoto.getIcon() == null || bufferImage == null){
            JOptionPane.showMessageDialog(rootPane, "Agrega una foto");
            return;
        }
        
        
        int choice = JOptionPane.showConfirmDialog
            (rootPane, 
            "¿Deseas modificar al contacto número " + codigotexto + "?", 
            "Confirmar modificación", 
            JOptionPane.YES_NO_CANCEL_OPTION);
        
        if(choice == JOptionPane.CANCEL_OPTION){ 
            this.resetFields(); 
            return;
        }
        
        if(choice != JOptionPane.YES_OPTION) return;
        
        waitForUpdateToFinish();
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        
        
        
        //Since the only ways to get a contact displaying is by searching, 
        //and searching always selects an element from the table, 
        //we can get the row index by getting the selected element
        int selectedRowIndex = table.getSelectedRow();
        if (selectedRowIndex == -1) return;
        
        int rowIndex = Integer.parseInt(table.getValueAt( selectedRowIndex, 0 ).toString()) - 1;
        
        String[] oldData = new String[10];
        for(int i = 2; i <= 11; i++){
            oldData[ i - 2 ] = model.getValueAt(rowIndex, i).toString(); 
        }
        
        model.setValueAt(Nombre, rowIndex, 2);
        model.setValueAt(Apellido, rowIndex, 3);
        model.setValueAt(Domicilio, rowIndex, 4);
        model.setValueAt(Telefono, rowIndex, 5);
        model.setValueAt(Email, rowIndex, 6);
        model.setValueAt(Fecha.toString(), rowIndex, 7);
        model.setValueAt(JTFEdad.getText(), rowIndex, 8);
        model.setValueAt((Sexo.equals("masculino") ? "M" : "F"), rowIndex, 9);
        model.setValueAt(Signo, rowIndex, 10);
        model.setValueAt(Personaje, rowIndex, 11);
                
        Image oldImage = images.get(rowIndex);
        images.set(rowIndex, bufferImage);
        
        
        CompletableFuture.runAsync(() -> {
                System.out.println("Starting async in MODIFY");
            doneSignal = new CountDownLatch(1);
            try {
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write((RenderedImage)bufferImage, "jpg", baos);
                InputStream is = new ByteArrayInputStream( baos.toByteArray() );
        
                metodos.Modificar(
                        Codigo,
                        Nombre,
                        Apellido,
                        Domicilio,
                        Telefono,
                        Email,
                        Fecha,
                        Edad,
                        Sexo,
                        Signo,
                        Personaje,
                        is);
            } catch (SQLException ex) {
                Logger.getLogger(Contactos.class.getName()).log(Level.SEVERE, null, ex);

                for(int column = 2; column <= 11; column++){
                    model.setValueAt(oldData[ column - 2 ], rowIndex, column);
                }
                images.set(rowIndex, oldImage);
                
                JOptionPane.showMessageDialog(rootPane, "Hubo un problema al modificar los datos, los cambios se han revertido.");
            } catch (IOException ex) {
                Logger.getLogger(Contactos.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Hubo un problema agregando la imagen, asegurate de que sea un archivo .JPG y vuelve a seleccionarla");
            } finally {
                System.out.println("FINISHED");
                doneSignal.countDown();
            }
        });                                    

    }//GEN-LAST:event_JBModificarActionPerformed

    private void JBCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_JBCerrarActionPerformed

    private void JBLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBLimpiarActionPerformed
       this.resetFields();
        this.updateWholeTable();
    }//GEN-LAST:event_JBLimpiarActionPerformed

    private void JBBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBBuscarActionPerformed
   String target = JOptionPane.showInputDialog
            (rootPane, 
            "Nombre a buscar:", 
            "Buscando", 
            JOptionPane.QUESTION_MESSAGE)
                .toLowerCase();
        if(target != null){
            CompletableFuture<List<String[]>> futureList = CompletableFuture
                    .supplyAsync(
                            () -> metodos.Buscar(target)
                    );
            
            
            RowFilter<TableModel, Object> filter = new RowFilter<TableModel, Object>() {
                @Override
                public boolean include(Entry<? extends TableModel, ? extends Object> entry) {
                    String name = entry.getStringValue(2).toLowerCase();
                    return name.equals(target);
                }
            };
            
            //DO NOT MOVE
            //resetFields contains a wait for isUpdating, so moving it after the
            //completablefuture is declared would make the whole method
            //wait for it to finish
            this.resetFields();
            
            sorter.setRowFilter(filter);
            
            CompletableFuture.runAsync( 
                () -> {
                    System.out.println("Starting async in SEARCH");
                    doneSignal = new CountDownLatch(1);
                    
                    List<String[]> resultList = futureList.join();
                    ListIterator<String[]> iterator = resultList.listIterator();
                    int rowIndex = 0;

                    while( iterator.hasNext() ){
                        String[] resultados = iterator.next();
                                                
                        boolean isDifferent = false;
                        System.out.print("\n" + rowIndex + ": ");
                        
                        for(int column = 2; column <= 11; column++){
                            System.out.print(table.getValueAt(rowIndex, column) + ", ");
                            if( !table.getValueAt(rowIndex, column).equals(resultados[ column - 1 ]) ){
                                table.setValueAt(resultados[ column - 1], rowIndex, column);
                                isDifferent = true;
                            }
                        }

                        if( isDifferent ){
                            if(table.getRowCount() == 1 ) {
                                JOptionPane.showMessageDialog(rootPane, "Precaución: La primera fila ha cambiado valores");
                            }

                            else{
                                int selectedRow = table.getSelectedRow();
                                JOptionPane.showMessageDialog(rootPane, "Precaución: La fila en posición " + (selectedRow + 1) + " ha cambiado valores");
                            }
                        }
                        rowIndex++;
                    }

                    //for testing, remove later
                    System.out.println("\nFINISHED");
                    
                    doneSignal.countDown();
                }
            );
            
            if(table.getRowCount() < 1){
                JOptionPane.showMessageDialog(
                        rootPane,
                        "No se encontró a " + target);
                return;
            }
            
            table.setRowSelectionInterval(0, 0);
            this.useTableToUpdate(0);
            
            if(table.getRowCount() > 1)
                table.setRowSelectionAllowed( true );    
            }              
    }//GEN-LAST:event_JBBuscarActionPerformed

    private void JBEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBEliminarActionPerformed
    waitForUpdateToFinish();
        
        String codeText = JTFCodigo.getText();
        if(codeText.equals("")){
            JOptionPane.showMessageDialog(rootPane, "No hay contacto que eliminar");
            return;
        }
        
        int choice = JOptionPane.showConfirmDialog
            (rootPane, 
            "¿Deseas eliminar al contacto número " + codeText + ", " + JTFNombre.getText() + " " + JTFApellido.getText() + "?", 
            "Confirmar eliminacion", 
            JOptionPane.YES_NO_CANCEL_OPTION);
        
        if(choice == JOptionPane.CANCEL_OPTION){ 
            this.resetFields(); 
            return;
        }
        
        if(choice != JOptionPane.YES_OPTION) return;
        
        int Codigo = Integer.parseInt(codeText);
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        
        //See modify button for explanation
        int selectedRow = table.getSelectedRow();
        if(selectedRow == -1) return;
        
        int trueIndex = Integer.parseInt( table.getValueAt( selectedRow, 0).toString() ) - 1;
        
        String[] oldRow = new String[12];
        for(int column = 0; column <= 11; column++){
            oldRow[column] = table.getValueAt(selectedRow, column).toString();
        }
        
        model.removeRow(trueIndex);
        this.resetFields();
        
        
        CompletableFuture.runAsync(() -> {
            System.out.println("Starting async in DELETE");
            doneSignal = new CountDownLatch(1);
            try {
                metodos.Eliminar(Codigo);
                
            } catch (SQLException ex) {
                Logger.getLogger(Contactos.class.getName()).log(Level.SEVERE, null, ex);

                model.insertRow(trueIndex, oldRow);
                
                JOptionPane.showMessageDialog(rootPane, "Hubo un problema al eliminar los datos, los cambios se han revertido.");
            } finally {
                    System.out.println("FINISHED");
                    doneSignal.countDown();
                }
            });
    }//GEN-LAST:event_JBEliminarActionPerformed

    private void JTFEdadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTFEdadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTFEdadActionPerformed

    private void JTFEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTFEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTFEmailActionPerformed
    private void resetFields(){
        waitForUpdateToFinish();
        JTFCodigo.setText("");
        JTFNombre.setText("");
        JTFApellido.setText("");
        JTFDomicilio.setText("");
        JTFEmail.setText("");
        JTFTelefono.setText("");
        JDCFecha.setDate(null);
        JTFEdad.setText("");
        JRDHombre.setSelected(false);
        JRDMujer.setSelected(false);
        JLSigno.setDisplayedMnemonicIndex(0);
        JTFPersonaje.setText("");
        
        JTFNombre.setForeground(Color.black);
        JTFApellido.setForeground(Color.black);
        JTFTelefono.setForeground(Color.black);
        JTFEmail.setForeground(Color.black);
        
        JLNombreW.setText(" ");
        JLApellidoW.setText(" ");
        JLTelefonoW.setText(" ");
        JLEmailW.setText(" ");
                
        JLFoto.setIcon(null);
        JLFoto.updateUI();
        bufferImage = null;
        
        sorter.setRowFilter(null);
        table.setRowSelectionAllowed( false );
    }
     private void nacimientoPropertyChange(java.beans.PropertyChangeEvent evt) {                                          
        //Checa cada vez que la fecha de nacimiento cambia y actualiza la edad apropiadamente
        
        java.util.Date birthdate = JDCFecha.getDate();
        if(birthdate == null){
            JTFEdad.setText("");
            return;
        }
        LocalDate birthdateLocal = birthdate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        LocalDate now = LocalDate.now();
        Period age = Period.between(birthdateLocal, now);
        JTFEdad.setText( Integer.toString(age.getYears()) );
    }     
    private void nombreKeyReleased(java.awt.event.KeyEvent evt) {                                   
        this.field_check_letters(JTFNombre, JLNombreW, 0);
    } 
    private void field_check_letters( javax.swing.JTextField component, javax.swing.JLabel warning, int index ){
        String text = component.getText();
        final String REGEX_CONTAINS_NUMBER_VERIFIER = ".*\\d.*";
        textVerifier[index] = !text.matches(REGEX_CONTAINS_NUMBER_VERIFIER);
        
        if( !textVerifier[index] ){
            component.setForeground(Color.red);
            warning.setText("Solo puede contener letras");
        }
        else {
            component.setForeground(Color.black);
            warning.setText(" ");
        }
    }
    private void apellidoKeyReleased(java.awt.event.KeyEvent evt) {                                     
        this.field_check_letters(JTFApellido, JLApellidoW, 1);
        
    }  
    private void telefonoKeyReleased(java.awt.event.KeyEvent evt) {                                     
        this.field_check_phone(JTFTelefono, 2);
    }  
    private void field_check_phone( javax.swing.JTextField component, int index ){
        String text = component.getText();
        textVerifier[index] = true;
        if( text.length() > 10 ){
            textVerifier[index] = false;
        } else{
            final String REGEX_ONLY_NUMBERS_VERIFIER = "^\\d+$";
            textVerifier[index] = text.matches(REGEX_ONLY_NUMBERS_VERIFIER);
        }
        
        if( !textVerifier[index] ){
            component.setForeground(Color.red);
            JLTelefonoW.setText("Solo puede contener numeros");
        }
        else {
            component.setForeground(Color.black);
            JLTelefonoW.setText(" ");
        }
    }
    private void emailKeyReleased(java.awt.event.KeyEvent evt) {                                  
        this.field_check_email(JTFEmail, 3);
    }  
    private void field_check_email( javax.swing.JTextField component, int index ){        
        String text = component.getText();
        final String REGEX_EMAIL_VERIFIER = "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$";
        textVerifier[index] = text.matches(REGEX_EMAIL_VERIFIER);
        
        if( !textVerifier[index] ) {
            component.setForeground(Color.red);
            JLEmailW.setText("Direccion de email inválida");
        }
        else {
            component.setForeground(Color.black);
            JLEmailW.setText(" ");
        }
    }
    private void useTableToUpdate( int row ){
        String[] resultados = {
            table.getValueAt(row, 1).toString(),
            table.getValueAt(row, 2).toString(),
            table.getValueAt(row, 3).toString(),
            table.getValueAt(row, 4).toString(),
            table.getValueAt(row, 5).toString(),
            table.getValueAt(row, 6).toString(),
            table.getValueAt(row, 7).toString(),
            table.getValueAt(row, 8).toString(),
            table.getValueAt(row, 9).toString(),
            table.getValueAt(row, 10).toString(),
            table.getValueAt(row, 11).toString(),
        };
        this.updateFields(resultados);
        
        Image image = images.get( Integer.parseInt( table.getValueAt(row, 0).toString() ) - 1 );
        this.setImageIcon( image );
    }
    private void updateFields(String[] resultados){
        JTFCodigo.setText( resultados[0] );
        JTFCodigo.setOpaque(true);
        JLCodigo.setOpaque(true);

        JTFNombre.setText(resultados[1]);
        this.field_check_letters(JTFNombre, JLNombreW, 0);
        
        JTFApellido.setText(resultados[2]);
        this.field_check_letters(JTFApellido, JLApellidoW, 1);
        
        JTFDomicilio.setText(resultados[3]);
        JTFTelefono.setText(resultados[4]);
        this.field_check_phone(JTFTelefono, 2);
        
        JTFEmail.setText(resultados[5]);
        this.field_check_email(JTFEmail, 3);
        
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-mm-dd");
            java.util.Date fecha = sdf.parse( resultados[6] );
            JDCFecha.setDate(fecha);
        } catch(ParseException e){
            Logger.getLogger(Contactos.class.getName())
                    .log(Level.SEVERE, null, e);
        }
        JTFEdad.setText(resultados[7]);
        if(resultados[8].toLowerCase().equals("masculino"))
            JRDHombre.setSelected(true);
        else
            JRDMujer.setSelected(true);
        switch(resultados[9]){
            case "Aries" -> JCBSigno.setSelectedIndex(0);
            case "Tauro" -> JCBSigno.setSelectedIndex(1);
            case "Géminis" -> JCBSigno.setSelectedIndex(2);
            case "Cáncer" -> JCBSigno.setSelectedIndex(3);
            case "Leo" -> JCBSigno.setSelectedIndex(4);
            case "Virgo" -> JCBSigno.setSelectedIndex(5);
            case "Libra" -> JCBSigno.setSelectedIndex(6);
            case "Escorpio" -> JCBSigno.setSelectedIndex(7);
            case "Sagitario" -> JCBSigno.setSelectedIndex(8);
            case "Capricornio" -> JCBSigno.setSelectedIndex(9);
            case "Acuario" -> JCBSigno.setSelectedIndex(10);
            case "Piscis" -> JCBSigno.setSelectedIndex(11);
        }
        JTFPersonaje.setText(resultados[10]);
    }
    private void setImageIcon( Image image ){
        bufferImage = image;
        Image scaled = image.getScaledInstance(
                        JLFoto.getWidth(),
                        JLFoto.getHeight(),
                        Image.SCALE_DEFAULT);
        JLFoto.setIcon(new ImageIcon(scaled));
        JLFoto.updateUI();
    }
    private void updateWholeTable(){
        List<String[]> resultList = metodos.QueryAll(images);
        ListIterator<String[]> iterator = resultList.listIterator();
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        
        while( iterator.hasNext() ){
            String[] resultados = iterator.next();
            model.addRow(resultados);
        }
    }
    private void waitForUpdateToFinish() {
        while( true ){
            try {
                //testing
                System.out.println("Waiting...");
                doneSignal.await();
                System.out.println("Done!");
                return;
            } catch (InterruptedException ex) {
                Logger.getLogger(Contactos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
        
    
    private Image convertirImagen(byte[] bytes) throws IOException{
        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
        Iterator lector = ImageIO.getImageReadersByFormatName("jpg");
        ImageReader leerImg = (ImageReader)lector.next();
        Object obj = bais;
        ImageInputStream iis = ImageIO.createImageInputStream(obj);
        leerImg.setInput(iis, true);
        ImageReadParam irp = leerImg.getDefaultReadParam();
        return leerImg.read(0,irp);
        
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBAgregar;
    private javax.swing.JButton JBBuscar;
    private javax.swing.JButton JBCerrar;
    private javax.swing.JButton JBEliminar;
    private javax.swing.JButton JBFoto;
    private javax.swing.JButton JBLimpiar;
    private javax.swing.JButton JBModificar;
    private javax.swing.JComboBox<String> JCBSigno;
    private com.toedter.calendar.JDateChooser JDCFecha;
    private javax.swing.JFileChooser JFCFoto;
    private javax.swing.JLabel JLApellido;
    private javax.swing.JLabel JLApellidoW;
    private javax.swing.JLabel JLCod2;
    private javax.swing.JLabel JLCodigo;
    private javax.swing.JLabel JLDomicilio;
    private javax.swing.JLabel JLEdad;
    private javax.swing.JLabel JLEmail;
    private javax.swing.JLabel JLEmailW;
    private javax.swing.JLabel JLFechaNaci;
    private javax.swing.JLabel JLFoto;
    private javax.swing.JLabel JLNombre;
    private javax.swing.JLabel JLNombreW;
    private javax.swing.JLabel JLPersonaje;
    private javax.swing.JLabel JLSexo;
    private javax.swing.JLabel JLSigno;
    private javax.swing.JLabel JLTelefono;
    private javax.swing.JLabel JLTelefonoW;
    private javax.swing.JRadioButton JRDHombre;
    private javax.swing.JRadioButton JRDMujer;
    private javax.swing.JTextField JTFApellido;
    private javax.swing.JTextField JTFCodigo;
    private javax.swing.JTextField JTFDomicilio;
    private javax.swing.JTextField JTFEdad;
    private javax.swing.JTextField JTFEmail;
    private javax.swing.JTextField JTFNombre;
    private javax.swing.JTextField JTFPersonaje;
    private javax.swing.JTextField JTFTelefono;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
